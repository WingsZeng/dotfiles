### Lines configured by zsh-newuser-install
HISTFILE=$XDG_DATA_HOME/zsh/history
HISTSIZE=1000000
SAVEHIST=1000000
unsetopt autocd beep
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt hist_save_no_dups
setopt inc_append_history_time
setopt extended_history
### End of lines configured by zsh-newuser-install

### Added by Zinit's installer
if [[ ! -f $XDG_DATA_HOME/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$XDG_DATA_HOME/zinit" && command chmod g-rwX "$XDG_DATA_HOME/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$XDG_DATA_HOME/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$XDG_DATA_HOME/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

### Promot
# starship
export STARSHIP_CONFIG=$XDG_CONFIG_HOME/starship/starship.toml
zinit ice as"command" from"gh-r" \
	atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
	atpull"%atclone" src"init.zsh"
zinit light starship/starship
### End of promot

### Plugins
zinit wait lucid light-mode for \
	atinit"export _ZL_DATA=$XDG_DATA_HOME/zsh/zlua" \
	atload"export ZLUA_SCRIPT=$ZINIT[PLUGINS_DIR]/skywind3000---z.lua/z.lua" \
		skywind3000/z.lua \
	Aloxaf/fzf-tab \
	joshskidmore/zsh-fzf-history-search \
	atinit"zicompinit; zicdreplay" \
		zdharma-continuum/fast-syntax-highlighting \
	atload"_zsh_autosuggest_start" \
		zsh-users/zsh-autosuggestions \
	blockf atpull'zinit creinstall -q .' \
		zsh-users/zsh-completions
### End of plugins

### Key binding
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^[[3~" delete-char
### End of key binding

### Environment
# python cli
export PYTHONSTARTUP=$XDG_CONFIG_HOME/python/pythonrc
# rust home
export RUSTUP_HOME=$XDG_DATA_HOME/rustup
export CARGO_HOME=$XDG_DATA_HOME/cargo
export PATH=$CARGO_HOME/bin:$PATH
# GPG home
export GNUPGHOME=$XDG_DATA_HOME/gnupg
# pass home
export PASSWORD_STORE_DIR=$XDG_DATA_HOME/password-store
# isyncrc
export MBSYNC_CONFIG=$XDG_CONFIG_HOME/isync/isyncrc
# gdb history
export GDBHISTFILE=$XDG_DATA_HOME/gdb/history
# npmrc
export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
# openjdk java
export _JAVA_OPTIONS=-Djava.util.prefs.userRoot="$XDG_CONFIG_HOME"/java
# docker home
export DOCKER_CONFIG=$XDG_DATA_HOME/docker
# wget config
export WGETRC=$XDG_CONFIG_HOME/wget/wgetrc
# gradle home
export GRADLE_USER_HOME=$XDG_DATA_HOME/gradle
### End of environment

### Alias
# eza
alias e='eza -laho --group-directories-first --icons=always --smart-group --no-quotes --git --git-repos'
alias t='eza -T --group-directories-first --icons=always --no-quotes'
### End of alias

### Functions
# docker gcc for universal build
function build_universal() {
    docker run --rm -v "$PWD":/codes -w /codes wingszeng/gcc "$@"
}
# yazi
function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
# change 2 files
function chg() {
    if [ $# -ne 2 ]; then
        echo "Usage: chg <file1> <file2>"
        return 1
    fi

    local file1="$1"
    local file2="$2"

    if [ ! -e "$file1" ]; then
        echo "$file1 does not exist."
        return 1
    fi

    if [ ! -e "$file2" ]; then
        echo "$file2 does not exist."
        return 1
    fi

    local temp_file=".swap_temp"
    mv "$file1" "$temp_file"
    mv "$file2" "$file1"
    mv "$temp_file" "$file2"
}
### End of functions

### Hooks
autoload -Uz add-zsh-hook
preexec_pipe_message_to_zjswitcher() {
    [[ -n "$ZELLIJ" ]] && zellij pipe --name Event::CommandUpdate -- $1
}
add-zsh-hook preexec preexec_pipe_message_to_zjswitcher

precmd_pipe_message_to_zjswitcher() {
    [[ -n "$ZELLIJ" ]] && zellij pipe --name Event::CommandUpdate -- $SHELL
}
add-zsh-hook precmd precmd_pipe_message_to_zjswitcher
### End of hooks

### Line editor
_aichat_zsh() {
    if [[ -n "$BUFFER" ]]; then
        local _old=$BUFFER
        BUFFER+="⌛"
        zle -I && zle redisplay
        BUFFER=$(aichat -e "$_old")
        zle end-of-line
    fi
}
zle -N _aichat_zsh
bindkey '^[^M' _aichat_zsh
### End of line editor
